{"version":3,"sources":["components/Gears/Gears.module.scss","components/Home/Home.module.scss","components/Footer/Footer.module.scss","components/Gears/Gears.tsx","components/Home/Home.tsx","components/Footer/Footer.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/App/theme.tsx","styles/variables.ts","components/App/App.tsx","serviceWorker.ts","index.tsx","components/Navbar/Navbar.module.scss"],"names":["module","exports","container","Component","defaultOptions","loop","autoplay","animationData","react_default","a","createElement","className","Styles","dist_default","options","Home","Gears","Typography_default","variant","gutterBottom","Build_default","process","AppBar_default","position","Toolbar_default","color","grow","props","Fragment","Navbar","children","Footer","createMuiTheme","palette","primary","main","overrides","MuiButton","root","justifyContent","MuiTypography","body1","h6","typography","useNextVariants","App","MuiThemeProvider_default","theme","react_router_dom","Layout","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,UAAA,4niBCAlBF,EAAAC,QAAA,CAAkBC,UAAA,8CCAlBF,EAAAC,QAAA,CAAkBC,UAAA,8PCkBHC,EAda,WACxB,IAAMC,EAAiB,CACnBC,MAAM,EACNC,UAAU,EACVC,cAAeA,GAGnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,WACnBM,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,QAASV,2DCSdW,EAjBQ,WACnB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,WACnBM,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAD,MACAR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAYS,QAAQ,KAAKC,cAAY,GAArC,oBAGAX,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAYS,QAAQ,SAApB,2DAEIV,EAAAC,EAAAC,cAACU,EAAAX,EAAD,4BCELN,EAda,WAOxB,OACIK,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOV,WACtBM,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAYS,QAAQ,SAApB,QAH2CG,gECSxClB,EAba,WACxB,OACIK,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOV,WACtBM,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQc,SAAS,UACbf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,KACID,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAYS,QAAQ,KAAKO,MAAM,UAAUd,UAAWC,IAAOc,MAA3D,oBCOLvB,EAVoB,SAACwB,GAChC,OACInB,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACIpB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,eAAUiB,EAAMG,UAChBtB,EAAAC,EAAAC,cAACqB,EAAD,iBCVGC,2BAAe,CAC1BC,QAAS,CACLC,QAAS,CACLC,KCM4B,YDHpCC,UAAW,CACPC,UAAW,CACPC,KAAM,CACFC,eAAgB,WAGxBC,cAAe,CACXC,MAAO,CACHhB,MCF4B,WDIhCiB,GAAI,CACAjB,MCRwB,aDYpCkB,WAAY,CACRC,iBAAiB,KEJVC,EAdO,WAClB,OACIrC,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,CAAkBsC,MAAOA,GACrBvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACIxC,EAAAC,EAAAC,cAACuC,EAAD,KACIzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACI1C,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,SCCrCuC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCbvCC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2IzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,KAC1B,SAACC,GACGA,EAAaC,mCEnJ7BrE,EAAAC,QAAA,CAAkBC,UAAA","file":"static/js/main.ca03c232.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Gears_container__34F6S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__3HKK4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__188QZ\"};","import React from 'react';\nimport Lottie from 'react-lottie';\nimport Styles from './Gears.module.scss';\nimport animationData from '../../assets/lottie/geegrs-animation.json';\n\nconst Component: React.FC = (): JSX.Element => {\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div className={Styles.container}>\n            <Lottie options={defaultOptions} />\n        </div>\n    );\n};\n\nexport default Component;\n","import React from 'react';\nimport Gears from '../Gears';\nimport Styles from './Home.module.scss';\nimport Typography from '@material-ui/core/Typography';\nimport BuildIcon from '@material-ui/icons/Build';\n\nconst Home: React.FC = (): JSX.Element => {\n    return (\n        <div className={Styles.container}>\n            <div>\n                <Gears />\n                <Typography variant=\"h6\" gutterBottom>\n                    Template project\n                </Typography>\n                <Typography variant=\"body1\">\n                    A simple scaffolded project utilising common frameworks.\n                    <BuildIcon />\n                </Typography>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Styles from './Footer.module.scss';\n\nconst Component: React.FC = (): JSX.Element => {\n    /**\n     *  Below is a tad naughty, however for the usecase of this demo\n     * I do not need to over engineer the testing of Process arguments */\n    /* istanbul ignore next */\n\n    const appVersion = process.env.REACT_APP_VERSION ? process.env.REACT_APP_VERSION : '#.#.#';\n    return (\n        <footer className={Styles.container}>\n            <Typography variant=\"body1\">App v{appVersion}</Typography>\n        </footer>\n    );\n};\n\nexport default Component;\n","import React from 'react';\nimport Styles from './Navbar.module.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst Component: React.FC = (): JSX.Element => {\n    return (\n        <header className={Styles.container}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" className={Styles.grow}>\n                        Template App\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </header>\n    );\n};\nexport default Component;\n","import React, { ReactNode } from 'react';\nimport Footer from '../Footer/Footer';\nimport Navbar from '../Navbar/Navbar';\n\nexport interface Props {\n    children: ReactNode;\n}\n\nconst Component: React.FC<Props> = (props: Props): JSX.Element => {\n    return (\n        <React.Fragment>\n            <Navbar />\n            <section>{props.children}</section>\n            <Footer />\n        </React.Fragment>\n    );\n};\n\nexport default Component;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { COLOR_BLUE_HEX, COLOR_CHARCOAL_HEX } from '../../styles/variables';\n\nexport default createMuiTheme({\n    palette: {\n        primary: {\n            main: COLOR_BLUE_HEX,\n        },\n    },\n    overrides: {\n        MuiButton: {\n            root: {\n                justifyContent: 'center',\n            },\n        },\n        MuiTypography: {\n            body1: {\n                color: COLOR_CHARCOAL_HEX,\n            },\n            h6: {\n                color: COLOR_BLUE_HEX,\n            },\n        },\n    },\n    typography: {\n        useNextVariants: true,\n    },\n});\n","import { ColorRGB, ColorHex } from '../interfaces/Color';\n\n// Parity with SCSS Variables sheet\nexport const COLOR_RED_RGB: ColorRGB = { r: 219, g: 68, b: 55 };\nexport const COLOR_GREEN_RGB: ColorRGB = { r: 15, g: 157, b: 88 };\nexport const COLOR_BLUE_RGB: ColorRGB = { r: 66, g: 133, b: 244 };\nexport const COLOR_YELLOW_RGB: ColorRGB = { r: 244, g: 160, b: 0 };\nexport const COLOR_GREY_RGB: ColorRGB = { r: 242, g: 242, b: 242 };\nexport const COLOR_CHARCOAL_RGB: ColorRGB = { r: 35, g: 35, b: 35 };\n\nexport const COLOR_RED_HEX: ColorHex = '#DB4437';\nexport const COLOR_GREEN_HEX: ColorHex = '#0F9D58';\nexport const COLOR_BLUE_HEX: ColorHex = '#4285F4';\nexport const COLOR_YELLOW_HEX: ColorHex = '#F4B400';\nexport const COLOR_GREY_HEX: ColorHex = '#F2F2F2';\nexport const COLOR_CHARCOAL_HEX: ColorHex = '#232323';\n","import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from '../Home';\nimport Layout from '../Layout';\nimport theme from './theme';\n\nconst App: React.FC = (): JSX.Element => {\n    return (\n        <MuiThemeProvider theme={theme}>\n            <BrowserRouter>\n                <Layout>\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                    </Switch>\n                </Layout>\n            </BrowserRouter>\n        </MuiThemeProvider>\n    );\n};\n\nexport default App;\n","/** TODO: Covert serviceWorker.ts to*/\n/* eslint-disable sonarjs/cognitive-complexity */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nconst registerValidSW = (swUrl: string, config?: Config): void => {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(\n            (registration): void => {\n                registration.onupdatefound = (): void => {\n                    const installingWorker = registration.installing;\n                    if (installingWorker == null) {\n                        return;\n                    }\n                    installingWorker.onstatechange = (): void => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the updated precached content has been fetched,\n                                // but the previous service worker will still serve the older\n                                // content until all client tabs are closed.\n                                console.log(\n                                    'New content is available and will be used when all ' +\n                                        'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                );\n\n                                // Execute callback\n                                if (config && config.onUpdate) {\n                                    config.onUpdate(registration);\n                                }\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // \"Content is cached for offline use.\" message.\n                                console.log('Content is cached for offline use.');\n\n                                // Execute callback\n                                if (config && config.onSuccess) {\n                                    config.onSuccess(registration);\n                                }\n                            }\n                        }\n                    };\n                };\n            },\n        )\n        .catch(\n            (error): void => {\n                console.error('Error during service worker registration:', error);\n            },\n        );\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config): void => {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(\n            (response): void => {\n                // Ensure service worker exists, and that we really are getting a JS file.\n                const contentType = response.headers.get('content-type');\n                if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                    // No service worker found. Probably a different app. Reload the page.\n                    navigator.serviceWorker.ready.then(\n                        (registration): void => {\n                            registration.unregister().then(\n                                (): void => {\n                                    window.location.reload();\n                                },\n                            );\n                        },\n                    );\n                } else {\n                    // Service worker found. Proceed as normal.\n                    registerValidSW(swUrl, config);\n                }\n            },\n        )\n        .catch(\n            (): void => {\n                console.log('No internet connection found. App is running in offline mode.');\n            },\n        );\n};\n\nexport function register(config?: Config): void {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\n            'load',\n            (): void => {\n                const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n                if (isLocalhost) {\n                    // This is running on localhost. Let's check if a service worker still exists or not.\n                    checkValidServiceWorker(swUrl, config);\n\n                    // Add some additional logging to localhost, pointing developers to the\n                    // service worker/PWA documentation.\n                    navigator.serviceWorker.ready.then(\n                        (): void => {\n                            console.log(\n                                'This web app is being served cache-first by a service ' +\n                                    'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                            );\n                        },\n                    );\n                } else {\n                    // Is not localhost. Just register service worker\n                    registerValidSW(swUrl, config);\n                }\n            },\n        );\n    }\n}\nexport function unregister(): void {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(\n            (registration): void => {\n                registration.unregister();\n            },\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__Stw5O\"};"],"sourceRoot":""}