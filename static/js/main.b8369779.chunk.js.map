{"version":3,"sources":["components/Gears/Gears.module.scss","components/Home/Home.module.scss","components/BookSearch/BookSearch.module.scss","components/Footer/Footer.module.scss","actions/books.ts","components/Gears/Gears.tsx","selectors/books.ts","components/BookList/BookList.tsx","shared/services/api/google-books/GoogleBooks.ts","components/BookSearch/BookSearch.tsx","components/Home/Home.tsx","components/Footer/Footer.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/App/theme.tsx","styles/variables.ts","reducers/books.ts","reducers/index.ts","store/index.ts","components/App/App.tsx","serviceWorker.ts","index.tsx","components/Navbar/Navbar.module.scss"],"names":["module","exports","container","ActionTypes","Component","defaultOptions","loop","autoplay","animationData","react_default","a","createElement","className","Styles","dist_default","options","getBooksState","state","books","getBooks","createSelector","data","isFetching","getQuery","query","connect","props","map","book","index","key","title","length","Typography_default","variant","gutterBottom","api","GoogleBooks","Object","classCallCheck","this","apiUrl","maxResults","hasKey","console","warn","authors","volumeInfo","subtitle","publisher","publishedDate","image","imageLinks","large","undefined","link","infoLink","rating","averageRating","thumbnail","small","convertedBooks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","b","value","push","ConvertGoogleBookToBook","err","return","url","concat","encodeURI","getKey","debug","axios","get","then","res","ConvertGoogleBooksToBooks","items","catch","axiosError","error","name","message","Promise","reject","finally","process","GOOGLE_BOOKS_API_KEY","fetched","type","FETCHED","payload","fetch","dispatch","FETCHING","fetching","search","intervalId","TextField_default","label","onChange","event","currentTarget","clearTimeout","setTimeout","doneTyping","margin","Gears","BookSearch","BookList","AppBar_default","position","Toolbar_default","color","grow","Fragment","Navbar","children","Footer","createMuiTheme","palette","primary","main","overrides","MuiButton","root","justifyContent","MuiTypography","body1","h6","typography","useNextVariants","initialState","fromBooks","reducer","combineReducers","arguments","action","objectSpread","store","createStore","applyMiddleware","thunk","logger","App","es","MuiThemeProvider_default","theme","react_router_dom","Layout","react_router","exact","path","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8369779.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Gears_container__34F6S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__3HKK4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BookSearch_container__pynAb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__188QZ\"};","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport Book from 'types/Book';\nimport BookAPI from 'shared/services/api/google-books';\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\n\nconst api = new BookAPI(process.env.GOOGLE_BOOKS_API_KEY);\n\nexport enum ActionTypes {\n    FETCHING = '[books] FETCHING',\n    FETCHED = '[books] FETCHED',\n}\n\ninterface Fetching {\n    type: ActionTypes.FETCHING;\n    payload: { query: string };\n}\n\ninterface Fetched {\n    type: ActionTypes.FETCHED;\n    payload: { data: Book[] };\n}\n\nconst fetched = (data: Book[]): Fetched => {\n    return {\n        type: ActionTypes.FETCHED,\n        payload: {\n            data,\n        },\n    };\n};\n\nconst fetching = (query: string): Fetching => {\n    return {\n        type: ActionTypes.FETCHING,\n        payload: {\n            query,\n        },\n    };\n};\n\n// External method for fetching results\nexport const fetch = (query: string): ThunkAction<void, {}, {}, AnyAction> => {\n    return (dispatch: ThunkDispatch<{}, {}, AnyAction>): void => {\n        dispatch(fetching(query));\n        if (query.length > 0) {\n            api.search(query)\n                .then(\n                    (data: Book[]): void => {\n                        dispatch(fetched(data));\n                    },\n                )\n                .catch(\n                    (): void => {\n                        dispatch(fetched([]));\n                    },\n                );\n        } else {\n            dispatch(fetched([]));\n        }\n    };\n};\n\nexport type Action = Fetching | Fetched;\n","import React from 'react';\nimport Lottie from 'react-lottie';\nimport Styles from './Gears.module.scss';\nimport animationData from '../../assets/lottie/geegrs-animation.json';\n\nconst Component: React.FC = (): JSX.Element => {\n    const defaultOptions = {\n        loop: true,\n        autoplay: true,\n        animationData: animationData,\n    };\n\n    return (\n        <div className={Styles.container}>\n            <Lottie options={defaultOptions} />\n        </div>\n    );\n};\n\nexport default Component;\n","import * as Global from '../reducers';\nimport * as Books from '../reducers/books';\nimport { createSelector } from 'reselect';\nimport Book from 'types/Book';\n\nconst getBooksState = (state: Global.State): Books.State => state.books;\n\nexport const getBooks = createSelector(\n    [getBooksState],\n    (state: Books.State): Book[] => {\n        return state.data;\n    },\n);\n\nexport const isFetching = createSelector(\n    [getBooksState],\n    (state: Books.State): boolean => {\n        return state.isFetching;\n    },\n);\n\nexport const getQuery = createSelector(\n    [getBooksState],\n    (state: Books.State): string => {\n        return state.query;\n    },\n);\n","import React from 'react';\nimport Styles from './BookList.module.scss';\nimport { connect } from 'react-redux';\nimport { State } from 'reducers';\nimport Typography from '@material-ui/core/Typography';\nimport { getBooks, getQuery } from 'selectors/books';\nimport Book from 'types/Book';\n\ninterface Props {\n    data: Book[];\n    query: string;\n}\n\nconst Component: React.FC<Props> = (props: Props): JSX.Element => {\n    return (\n        <section className={Styles.container}>\n            {props.data.map(\n                (book: Book, index: number): JSX.Element => {\n                    return <div key={index}>{book.title}</div>;\n                },\n            )}\n            {props.data.length === 0 && props.query.length > 0 && (\n                <Typography variant=\"body1\" gutterBottom>\n                    <span>No books found for&quot;{props.query}&quot;</span>\n                </Typography>\n            )}\n        </section>\n    );\n};\n\nconst mapStateToProps = (state: State): Props => ({\n    data: getBooks(state),\n    query: getQuery(state),\n});\n\nexport default connect(mapStateToProps)(Component);\n","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport GoogleBooksAPI from './GoogleBooksAPI';\nimport Book from 'types/Book';\nimport GoogleBook from './GoogleBook';\nimport GoogleBooksAPIResults from './GoogleBooksResults';\n\nexport default class GoogleBooks implements GoogleBooksAPI {\n    public static ConvertGoogleBookToBook(book: GoogleBook): Book {\n        return {\n            authors: book.volumeInfo.authors,\n            title: book.volumeInfo.title,\n            subtitle: book.volumeInfo.subtitle,\n            publisher: book.volumeInfo.publisher,\n            publishedDate: book.volumeInfo.publishedDate,\n            image: book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.large : undefined,\n            link: book.volumeInfo.infoLink,\n            rating: book.volumeInfo.averageRating,\n            thumbnail: book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.small : undefined,\n        };\n    }\n\n    public static ConvertGoogleBooksToBooks(books: GoogleBook[]): Book[] {\n        const convertedBooks: Book[] = [];\n\n        for (const b of books) {\n            convertedBooks.push(GoogleBooks.ConvertGoogleBookToBook(b));\n        }\n\n        return convertedBooks;\n    }\n\n    private readonly apiUrl = 'https://www.googleapis.com/books/v1/volumes';\n    private maxResults: number;\n    private key: string | undefined;\n\n    /**\n     * @param key\n     */\n    public constructor(key?: string) {\n        this.maxResults = 12;\n        this.key = key;\n\n        if (!this.hasKey()) {\n            console.warn('Google Books API initiated without an API Key. Quota restrictions and errors may occur.');\n        }\n    }\n\n    /**\n     * @return {boolean}\n     */\n    public hasKey(): boolean {\n        return typeof this.key === 'string';\n    }\n\n    /**\n     * @return {string | undefined}\n     */\n    public getKey(): string | undefined {\n        return this.key;\n    }\n\n    /**\n     * @param query\n     * @return {Promise<Book[] | never>}\n     */\n    public search(query: string): Promise<Book[] | never> {\n        const url = `${this.apiUrl}?q=${encodeURI(query)}&maxResults=${this.maxResults}${\n            this.hasKey() ? '&key=' + this.getKey() : ''\n        }`;\n\n        console.debug(`Google Books API request ${url} is starting`);\n\n        return axios\n            .get<GoogleBooksAPIResults>(url)\n            .then(\n                (res: AxiosResponse<GoogleBooksAPIResults>): Book[] => {\n                    return GoogleBooks.ConvertGoogleBooksToBooks(res.data.items);\n                },\n            )\n            .catch(\n                (axiosError: AxiosError): Promise<never> => {\n                    console.error(axiosError.name, axiosError.message);\n                    return Promise.reject(axiosError);\n                },\n            )\n            .finally(\n                (): void => {\n                    console.debug(`Google Books API request ${url} has finalised`);\n                },\n            );\n    }\n}\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Styles from './BookSearch.module.scss';\nimport { connect } from 'react-redux';\nimport { fetch } from 'actions/books';\nimport { State } from 'reducers';\nimport { getQuery } from 'selectors/books';\n\ninterface PropsIn {\n    query: string;\n}\n\ninterface PropsOut {\n    fetch: (query: string) => void;\n}\n\ninterface Props extends PropsIn, PropsOut {}\n\nconst Component: React.FC<Props> = (props: Props): JSX.Element => {\n    const minUserInteractionMS = 2000;\n    let intervalId: NodeJS.Timeout;\n\n    const doneTyping = (query: string): void => {\n        props.fetch(query);\n    };\n\n    const onTyping = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const query = event.currentTarget.value;\n        clearTimeout(intervalId);\n        intervalId = setTimeout((): void => {\n            doneTyping(query);\n        }, minUserInteractionMS);\n    };\n\n    return (\n        <section className={Styles.container}>\n            <TextField label=\"Search\" onChange={onTyping} margin=\"normal\" />\n        </section>\n    );\n};\n\nconst mapStateToProps = (state: State): PropsIn => ({\n    query: getQuery(state),\n});\n\n// TODO Remove any types\n// const mapDispatchToProps = (dispatch: BookThunkDispatch): PropsOut => {\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst mapDispatchToProps = (dispatch: any): PropsOut => {\n    return {\n        fetch: (query: string): void => dispatch(fetch(query)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Component);\n","import React from 'react';\nimport Gears from '../Gears';\nimport Styles from './Home.module.scss';\nimport BookList from '../BookList';\nimport BookSearch from '../BookSearch';\nimport { State } from 'reducers';\nimport { connect } from 'react-redux';\nimport { isFetching } from 'selectors/books';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Props {\n    fetching: boolean;\n}\n\nconst Component: React.FC<Props> = (props: Props): JSX.Element => {\n    return (\n        <section className={Styles.container}>\n            <div>\n                {props.fetching ? (\n                    <div>\n                        <Gears />{' '}\n                        <Typography variant=\"body1\" gutterBottom>\n                            Searching ...\n                        </Typography>\n                    </div>\n                ) : (\n                    <div>\n                        <BookSearch />\n                        <BookList />\n                    </div>\n                )}\n            </div>\n        </section>\n    );\n};\n\nconst mapStateToProps = (state: State): Props => ({\n    fetching: isFetching(state),\n});\n\nexport default connect(mapStateToProps)(Component);\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Styles from './Footer.module.scss';\n\nconst Component: React.FC = (): JSX.Element => {\n    /**\n     *  Below is a tad naughty, however for the usecase of this demo\n     * I do not need to over engineer the testing of Process arguments */\n    /* istanbul ignore next */\n\n    const appVersion = process.env.REACT_APP_VERSION ? process.env.REACT_APP_VERSION : '#.#.#';\n    return (\n        <footer className={Styles.container}>\n            <Typography variant=\"body1\">v{appVersion}</Typography>\n        </footer>\n    );\n};\n\nexport default Component;\n","import React from 'react';\nimport Styles from './Navbar.module.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst Component: React.FC = (): JSX.Element => {\n    return (\n        <header className={Styles.container}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" className={Styles.grow}>\n                        Book Search{' '}\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </header>\n    );\n};\nexport default Component;\n","import React, { ReactNode } from 'react';\nimport Footer from '../Footer/Footer';\nimport Navbar from '../Navbar/Navbar';\n\nexport interface Props {\n    children: ReactNode;\n}\n\nconst Component: React.FC<Props> = (props: Props): JSX.Element => {\n    return (\n        <React.Fragment>\n            <Navbar />\n            <section>{props.children}</section>\n            <Footer />\n        </React.Fragment>\n    );\n};\n\nexport default Component;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { COLOR_BLUE_HEX, COLOR_CHARCOAL_HEX } from '../../styles/variables';\n\nexport default createMuiTheme({\n    palette: {\n        primary: {\n            main: COLOR_BLUE_HEX,\n        },\n    },\n    overrides: {\n        MuiButton: {\n            root: {\n                justifyContent: 'center',\n            },\n        },\n        MuiTypography: {\n            body1: {\n                color: COLOR_CHARCOAL_HEX,\n            },\n            h6: {\n                color: COLOR_BLUE_HEX,\n            },\n        },\n    },\n    typography: {\n        useNextVariants: true,\n    },\n});\n","import { ColorRGB, ColorHex } from 'types/Color';\n\n// Parity with SCSS Variables sheet\nexport const COLOR_RED_RGB: ColorRGB = { r: 219, g: 68, b: 55 };\nexport const COLOR_GREEN_RGB: ColorRGB = { r: 15, g: 157, b: 88 };\nexport const COLOR_BLUE_RGB: ColorRGB = { r: 66, g: 133, b: 244 };\nexport const COLOR_YELLOW_RGB: ColorRGB = { r: 244, g: 160, b: 0 };\nexport const COLOR_GREY_RGB: ColorRGB = { r: 242, g: 242, b: 242 };\nexport const COLOR_CHARCOAL_RGB: ColorRGB = { r: 35, g: 35, b: 35 };\n\nexport const COLOR_RED_HEX: ColorHex = '#DB4437';\nexport const COLOR_GREEN_HEX: ColorHex = '#0F9D58';\nexport const COLOR_BLUE_HEX: ColorHex = '#4285F4';\nexport const COLOR_YELLOW_HEX: ColorHex = '#F4B400';\nexport const COLOR_GREY_HEX: ColorHex = '#F2F2F2';\nexport const COLOR_CHARCOAL_HEX: ColorHex = '#232323';\n","import { ActionTypes, Action } from '../actions/books';\nimport Book from 'types/Book';\n\n/*\n * Book state interface\n */\nexport interface State {\n    isFetching: boolean;\n    data: Book[];\n    query: string;\n}\n\n/*\n * Initial empty state\n */\nexport const initialState: State = {\n    data: [],\n    isFetching: false,\n    query: '',\n};\n\n/*\n * Book state update\n */\nexport const reducer = (state: State = initialState, action: Action): State => {\n    switch (action.type) {\n        case ActionTypes.FETCHING: {\n            return {\n                data: [],\n                isFetching: true,\n                query: action.payload.query,\n            };\n        }\n        case ActionTypes.FETCHED: {\n            return {\n                ...state,\n                data: action.payload.data,\n                isFetching: false,\n            };\n        }\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport * as fromBooks from './books';\n\nexport interface State {\n    books: fromBooks.State;\n}\n\n/*\n * initialState of the app\n */\nexport const initialState: State = {\n    books: fromBooks.initialState,\n};\n\n/*\n * Root reducer of the app\n */\nexport const reducer = combineReducers<State>({\n    books: fromBooks.reducer,\n});\n","import logger from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport { State, reducer, initialState } from '../reducers';\nimport thunk from 'redux-thunk';\n\n// TODO Remove any for correct type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst store = createStore<State, any, any, any>(reducer, initialState, applyMiddleware(thunk, logger));\n\nexport default store;\n","import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Home from '../Home';\nimport Layout from '../Layout';\nimport theme from './theme';\nimport { Provider } from 'react-redux';\nimport store from 'store';\n\nconst App: React.FC = (): JSX.Element => {\n    return (\n        <Provider store={store}>\n            <MuiThemeProvider theme={theme}>\n                <HashRouter>\n                    <Layout>\n                        <Switch>\n                            <Route exact path=\"/\" component={Home} />\n                        </Switch>\n                    </Layout>\n                </HashRouter>\n            </MuiThemeProvider>\n        </Provider>\n    );\n};\n\nexport default App;\n","/** TODO: Covert serviceWorker.ts to*/\n/* eslint-disable sonarjs/cognitive-complexity */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nconst registerValidSW = (swUrl: string, config?: Config): void => {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(\n            (registration): void => {\n                registration.onupdatefound = (): void => {\n                    const installingWorker = registration.installing;\n                    if (installingWorker == null) {\n                        return;\n                    }\n                    installingWorker.onstatechange = (): void => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the updated precached content has been fetched,\n                                // but the previous service worker will still serve the older\n                                // content until all client tabs are closed.\n                                console.log(\n                                    'New content is available and will be used when all ' +\n                                        'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                );\n\n                                // Execute callback\n                                if (config && config.onUpdate) {\n                                    config.onUpdate(registration);\n                                }\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // \"Content is cached for offline use.\" message.\n                                console.log('Content is cached for offline use.');\n\n                                // Execute callback\n                                if (config && config.onSuccess) {\n                                    config.onSuccess(registration);\n                                }\n                            }\n                        }\n                    };\n                };\n            },\n        )\n        .catch(\n            (error): void => {\n                console.error('Error during service worker registration:', error);\n            },\n        );\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config): void => {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(\n            (response): void => {\n                // Ensure service worker exists, and that we really are getting a JS file.\n                const contentType = response.headers.get('content-type');\n                if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                    // No service worker found. Probably a different app. Reload the page.\n                    navigator.serviceWorker.ready.then(\n                        (registration): void => {\n                            registration.unregister().then(\n                                (): void => {\n                                    window.location.reload();\n                                },\n                            );\n                        },\n                    );\n                } else {\n                    // Service worker found. Proceed as normal.\n                    registerValidSW(swUrl, config);\n                }\n            },\n        )\n        .catch(\n            (): void => {\n                console.log('No internet connection found. App is running in offline mode.');\n            },\n        );\n};\n\nexport function register(config?: Config): void {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\n            'load',\n            (): void => {\n                const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n                if (isLocalhost) {\n                    // This is running on localhost. Let's check if a service worker still exists or not.\n                    checkValidServiceWorker(swUrl, config);\n\n                    // Add some additional logging to localhost, pointing developers to the\n                    // service worker/PWA documentation.\n                    navigator.serviceWorker.ready.then(\n                        (): void => {\n                            console.log(\n                                'This web app is being served cache-first by a service ' +\n                                    'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                            );\n                        },\n                    );\n                } else {\n                    // Is not localhost. Just register service worker\n                    registerValidSW(swUrl, config);\n                }\n            },\n        );\n    }\n}\nexport function unregister(): void {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(\n            (registration): void => {\n                registration.unregister();\n            },\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__Stw5O\"};"],"sourceRoot":""}